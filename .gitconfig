[user]

  name = Ivan Boothe
  email = ivan@rootwork.org

[core]

  # Use custom `.gitignore` and `.gitattributes`
  excludesfile = ~/.gitignore
  attributesfile = ~/.gitattributes

  # Always use Unix-style line endings (LF).
  eol = lf
  autocrlf = false
  safecrlf = false

  # Always use Windows-style line endings (CRLF) and convert when necessary.
  # Use this in a project-specific .gitconfig for cross-platform compatibility.
  # eol = crlf
  # autocrlf = true
  # safecrlf = true

  # Treat spaces before tabs and all kinds of trailing whitespace as an error
  # [default] trailing-space: looks for spaces at the end of a line
  # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
  whitespace = trailing-space,space-before-tab
  trustctime = false
  editor = subl
  filemode = false
  pager = diff-so-fancy | less --tabs=4 -RFX

[apply]

  # Detect whitespace errors when applying a patch
  whitespace = fix

[color]

  # Use colors in Git commands that are capable of colored output when
  # outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
  ui = true

[color "branch"]

  current = yellow reverse
  local = yellow
  remote = green

[color "diff"]

  meta = yellow
  frag = magenta bold # line info
  commit = "yellow bold"
  old = "red bold" # deletions
  new = "green bold" # additions
  whitespace = "red reverse"

[color "diff-highlight"]

  oldNormal = "red bold"
  oldHighlight = "red bold 52"
  newNormal = "green bold"
  newHighlight = "green bold 22"

[color "status"]

  added = yellow
  changed = green
  untracked = cyan

[credential]

  helper = cache --timeout=3600

[diff]

  tool = sublimerge
  renames = copies

  # Include any submodules in diff logs
  submodule = log

[difftool "sublimerge"]

  cmd = subl -n --wait \"$REMOTE\" \"$LOCAL\" --command \"sublimerge_diff_views {\\\"left_read_only\\\": true, \\\"right_read_only\\\": true}\"

  # Detect copies as well as renames
  renames = copies
  compactionHeuristic = true

[filter "media"]

  clean = git media clean %f
  smudge = git media smudge %f
  required = true

[filter "lfs"]

  clean = git-lfs clean %f
  smudge = git-lfs smudge %f
  required = true

[help]

  # Automatically correct and execute mistyped commands
  autocorrect = 1

[push]

  default = matching

[status]

  # Show status of any submodules on git status
  submoduleSummary = true

[url "git@github.com:"]

  insteadOf = "gh:"
  pushInsteadOf = "github:"
  pushInsteadOf = "git://github.com/"

[url "git://github.com/"]

  insteadOf = "github:"

[url "git@gist.github.com:"]

  insteadOf = "gst:"
  pushInsteadOf = "gist:"
  pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]

  insteadOf = "gist:"

[alias]

  # View abbreviated SHA, description, and history graph of the latest 20 commits
  l = log --pretty=oneline -n 20 --graph --abbrev-commit

  # View the current working tree status using the short format
  s = status -s
  st = status

  # Show the diff between the latest commit and the current state
  d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

  # `git di $number` shows the diff between the state `$number` revisions ago and the current state
  di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

  # Pull in remote changes for the current repository and all its submodules
  p = !"git pull; git submodule foreach git pull origin master"

  # Clone a repository including all submodules
  c = clone --recursive

  # Commit all changes
  ca = !git add -A && git commit -av

  # Switch to a branch, creating it if necessary
  go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

  # Show verbose output about tags, branches or remotes
  tags = tag -l
  branches = branch -a
  remotes = remote -v

  # Amend the currently staged files to the latest commit
  amend = commit --amend --reuse-message=HEAD

  # Credit an author on the latest commit
  credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

  # Interactive rebase with the given number of latest commits
  reb = "!r() { git rebase -i HEAD~$1; }; r"

  # Find branches containing commit
  fb = "!f() { git branch -a --contains $1; }; f"

  # Find tags containing commit
  ft = "!f() { git describe --always --contains $1; }; f"

  # Find commits by source code
  fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

  # Find commits by commit message
  fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

  # Remove branches that have already been merged with master
  # a.k.a. ‘delete merged’
  dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

  # Display all recent branches.
  # https://csswizardry.com/2017/05/little-things-i-like-to-do-with-git/
  recent = for-each-ref --count=10 --sort=-committerdate refs/heads/ --format="%(refname:short)"\

  # Display recent branches and pick among them.
  # https://github.com/rafaelrinaldi/til/blob/master/git/list-branches-by-date.md
  branches = "!sh -c \"git checkout $(git for-each-ref --sort='-authordate:iso8601' --format=' %(authordate:relative)%09%(refname:short)' refs/heads | pick | cut -f2)\""

  # Delete merged branches.
  # https://github.com/csswizardry/csswizardry.github.com/issues/66#issuecomment-303440587
  delete-merged = "!git branch --merged | grep  -v '\\*\\|master\\|develop' | xargs -n 1 git branch -d"
  dm = "!git branch --merged | grep  -v '\\*\\|master\\|develop' | xargs -n 1 git branch -d"

  # List a log of recent changes with useful information.
  # https://github.com/csswizardry/csswizardry.github.com/issues/66#issuecomment-303874088
  quicklog = log --oneline --decorate -10 --pretty=format:'%C(yellow)%h%C(reset)%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'

  # List contributors with number of commits
  contributors = shortlog --summary --numbered

  # Merge GitHub pull request on top of the `master` branch
  mpr = "!f() { \
    if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
      git fetch origin refs/pull/$1/head:pr/$1 && \
      git rebase master pr/$1 && \
      git checkout master && \
      git merge pr/$1 && \
      git branch -D pr/$1 && \
      git commit --amend -m \"$(git log -1 --pretty=%B)\n\nCloses #$1.\"; \
    fi \
  }; f"

  # Show the diffs of all staged files
  staged = diff --staged